**CLU Language - Documentation (Draft v1.0)**

---

Introduction
------------
CLU is a small, custom-designed programming language created for entertainment.
It supports:
- Variables and math operations
- Conditionals (`if`, `otherwise`, `end`)
- Functions (`function name -> parameters / end`)
- Function calls with arguments
- Executable `.clu` files

CLU parses programs first into an internal format, then executes them efficiently.

---

Language Syntax
---------------

### Variables
Define variables using the `is` keyword:

```
x is 5
y is 10
```

Variables store integer values.

---

### Math Operations
Supported operation:
- `add` two variables

Example:

```
z is x add y
```

Adds `x` and `y` and stores the result in `z`.

---

### Conditionals

Use `if`, `otherwise`, and `end` blocks:

```
if x greater y
    output x
otherwise
    output y
end
```

Supported comparisons inside `if`:
- `greater` (>)
- `less` (<)
- `equal` (==)
- `greater_equal` (>=)
- `less_equal` (<=)

The `otherwise` keyword acts like an `else` branch.

---

### Functions

Define a function using `function` syntax:

```
function addtwo -> a/b
    z is a add b
    output z
end
```

- `function name -> params/params` defines a function and its parameters.
- Parameters are separated by `/`.

Call the function by name and pass arguments:

```
addtwo 5 10
```

Arguments are matched to the function's parameters.

---

Execution
---------

Run a `.clu` file by executing from command line:

```bash
python main.py program.clu
```

CLU reads the file, parses it into a Program object, and executes all instructions.

---

Notes
-----
- `otherwise` must follow an `if`.
- `end` always closes the current `if` or `function` block.
- Variables are global unless modified within a function.



WRITTEN BY CONNOR CAMPAGNA @ GLASGOW UNI

